<?php

namespace App\Http\Controllers;

use Auth;
use App\User;
use Validator;
use App\Penalty;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use App\Http\Requests\LibraryRequest;

class UserController extends Controller
{
    public function index(){
        $user = Auth::user();
        $rental_history = DB::table("book_detail")
            ->leftjoin("rental", "book_detail.book_id", "=", "rental.book_id")
            ->where("rental.user_id", "=", $user->user_id)
            ->orderBy("rental.rent_date", "desc")
            ->get([ //長いけど引数無しだと上手くいかないので仕方ない
                "book_detail.book_id",
                "book_detail.image_path",
                "book_detail.book_title",
                "rental.rent_date",
                "rental.deadline",
                "rental.return_date"
                ]);   
        $renting = array();
        $rented  = array();
        foreach($rental_history as $one_rent){
            if(is_null($one_rent->return_date)){
                $renting[] = $one_rent;
            }else{
                $rented[] = $one_rent;
            }
        }
        $data = [
            "user"    => $user,
            "renting" => $renting,
            "rented"  => $rented,
        ];
        $penalty = Penalty::nowPenaltyData($user->user_id)->first();
        if(!is_null($penalty)){
            $data = array_merge($data, ["penalty" => $penalty->penalty_end]);
        }
        return view("library.users.userinfo", $data);
    }

    public function edit(Request $request){
        $item_name = $request->item_name;
        $user = Auth::user();
        if($item_name === "user_id"){
            $data = [
                "title" => "社員ID",   
                "column_value" => $user->user_id,
            ];
        }else if($item_name === "name"){
            $data = [
                "title" => "社員名",   
                "column_value" => $user->name,
            ];
        }else if($item_name === "email"){
            $data = [
                "title" => "メールアドレス",   
                "column_value" => $user->email,
            ];
        }else{
            return;
        }
        $additional_data = [
            "column_name" => $item_name,
        ];
        $data = array_merge($data, $additional_data);
        return view("library.users.edit", $data);
    }

    public function update(LibraryRequest $request){
        $auth = User::find($request->id);
        $form = $request->all();
        unset($form["_token"]);
        $auth->fill($form)->save();
        return redirect("/users/info");
    }

    public function passEdit(){
        return view("library.users.passedit");
    }

    public function passUpdate(LibraryRequest $request){
        $user = Auth::user();
        $passcheck = Hash::check($request->now_pass, $user->password);
        $validator = Validator::make(["now_pass" => $passcheck],
            ["now_pass" => "accepted"], ["現在のパスワードが正しくありません。"]);
        if($validator->fails()){
            return redirect("users/edit/password")
            ->withErrors($validator) 
            ->withInput();
        }

        $new_pass = Hash::make($request->new_pass);
        $auth = User::find($request->id);
        $form = ["password" => $new_pass];
        $auth->fill($form)->save();
        return redirect("/users/info");
    }

    public function penaltyEdit(){
        $user = Auth::user();
        $penalty_end = Penalty::nowPenaltyData($user->user_id)->first()->penalty_end;
        if(is_null($penalty_end)){
            $penalty_end = "";
        }
        return view("library.users.penaltyedit", ["penalty_end" => $penalty_end]);
    }
}
